// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace OnlineStore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.Property<int>("CategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("CategoryProduct");

                    b.HasData(
                        new
                        {
                            CategoriesId = 1,
                            ProductsId = 1
                        },
                        new
                        {
                            CategoriesId = 1,
                            ProductsId = 2
                        },
                        new
                        {
                            CategoriesId = 1,
                            ProductsId = 3
                        },
                        new
                        {
                            CategoriesId = 1,
                            ProductsId = 4
                        },
                        new
                        {
                            CategoriesId = 1,
                            ProductsId = 5
                        },
                        new
                        {
                            CategoriesId = 2,
                            ProductsId = 4
                        },
                        new
                        {
                            CategoriesId = 2,
                            ProductsId = 5
                        },
                        new
                        {
                            CategoriesId = 2,
                            ProductsId = 6
                        },
                        new
                        {
                            CategoriesId = 2,
                            ProductsId = 7
                        },
                        new
                        {
                            CategoriesId = 2,
                            ProductsId = 8
                        },
                        new
                        {
                            CategoriesId = 3,
                            ProductsId = 1
                        },
                        new
                        {
                            CategoriesId = 3,
                            ProductsId = 6
                        },
                        new
                        {
                            CategoriesId = 3,
                            ProductsId = 9
                        },
                        new
                        {
                            CategoriesId = 3,
                            ProductsId = 10
                        },
                        new
                        {
                            CategoriesId = 3,
                            ProductsId = 11
                        },
                        new
                        {
                            CategoriesId = 4,
                            ProductsId = 12
                        },
                        new
                        {
                            CategoriesId = 4,
                            ProductsId = 13
                        },
                        new
                        {
                            CategoriesId = 4,
                            ProductsId = 14
                        },
                        new
                        {
                            CategoriesId = 4,
                            ProductsId = 15
                        },
                        new
                        {
                            CategoriesId = 4,
                            ProductsId = 16
                        },
                        new
                        {
                            CategoriesId = 1,
                            ProductsId = 17
                        },
                        new
                        {
                            CategoriesId = 2,
                            ProductsId = 18
                        },
                        new
                        {
                            CategoriesId = 3,
                            ProductsId = 19
                        },
                        new
                        {
                            CategoriesId = 4,
                            ProductsId = 20
                        },
                        new
                        {
                            CategoriesId = 1,
                            ProductsId = 6
                        },
                        new
                        {
                            CategoriesId = 2,
                            ProductsId = 1
                        },
                        new
                        {
                            CategoriesId = 3,
                            ProductsId = 2
                        },
                        new
                        {
                            CategoriesId = 4,
                            ProductsId = 3
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Addresses", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("AppSettings", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "admin_email",
                            Value = "admin@example.com"
                        },
                        new
                        {
                            Id = 2,
                            Code = "support_email",
                            Value = "support@example.com"
                        },
                        new
                        {
                            Id = 3,
                            Code = "phone_number",
                            Value = "+971123456789"
                        },
                        new
                        {
                            Id = 4,
                            Code = "logo",
                            Value = "logo.png"
                        },
                        new
                        {
                            Id = 5,
                            Code = "app_title",
                            Value = "Online Store"
                        },
                        new
                        {
                            Id = 6,
                            Code = "app_description",
                            Value = "Best online store in UAE"
                        },
                        new
                        {
                            Id = 7,
                            Code = "facebook",
                            Value = "https://facebook.com/yourpage"
                        },
                        new
                        {
                            Id = 8,
                            Code = "whatsapp",
                            Value = "https://wa.me/971123456789"
                        },
                        new
                        {
                            Id = 9,
                            Code = "instagram",
                            Value = "https://instagram.com/yourpage"
                        },
                        new
                        {
                            Id = 10,
                            Code = "linkedin",
                            Value = "https://linkedin.com/company/yourpage"
                        },
                        new
                        {
                            Id = 11,
                            Code = "snapchat",
                            Value = "https://snapchat.com/add/yourpage"
                        },
                        new
                        {
                            Id = 12,
                            Code = "twitter",
                            Value = "https://twitter.com/yourpage"
                        },
                        new
                        {
                            Id = 13,
                            Code = "youtube",
                            Value = "https://youtube.com/yourchannel"
                        },
                        new
                        {
                            Id = 14,
                            Code = "cash_on_delivery_fees",
                            Value = "10.00"
                        },
                        new
                        {
                            Id = 15,
                            Code = "default_currency",
                            Value = "AED"
                        },
                        new
                        {
                            Id = 16,
                            Code = "timezone",
                            Value = "Asia/Dubai"
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.AppSettingTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AppSettingId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("AppSettingId");

                    b.ToTable("AppSettingTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppSettingId = 1,
                            Key = "Admin Email",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 2,
                            AppSettingId = 1,
                            Key = "البريد الإلكتروني للمسؤول",
                            LanguageCode = "ar"
                        },
                        new
                        {
                            Id = 3,
                            AppSettingId = 2,
                            Key = "Support Email",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 4,
                            AppSettingId = 2,
                            Key = "البريد الإلكتروني للدعم",
                            LanguageCode = "ar"
                        },
                        new
                        {
                            Id = 5,
                            AppSettingId = 3,
                            Key = "Phone Number",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 6,
                            AppSettingId = 3,
                            Key = "رقم الهاتف",
                            LanguageCode = "ar"
                        },
                        new
                        {
                            Id = 7,
                            AppSettingId = 4,
                            Key = "Logo",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 8,
                            AppSettingId = 4,
                            Key = "شعار التطبيق",
                            LanguageCode = "ar"
                        },
                        new
                        {
                            Id = 9,
                            AppSettingId = 5,
                            Key = "App Title",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 10,
                            AppSettingId = 5,
                            Key = "عنوان التطبيق",
                            LanguageCode = "ar"
                        },
                        new
                        {
                            Id = 11,
                            AppSettingId = 6,
                            Key = "App Description",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 12,
                            AppSettingId = 6,
                            Key = "وصف التطبيق",
                            LanguageCode = "ar"
                        },
                        new
                        {
                            Id = 13,
                            AppSettingId = 7,
                            Key = "Facebook",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 14,
                            AppSettingId = 7,
                            Key = "فيس بوك",
                            LanguageCode = "ar"
                        },
                        new
                        {
                            Id = 15,
                            AppSettingId = 8,
                            Key = "WhatsApp",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 16,
                            AppSettingId = 8,
                            Key = "واتساب",
                            LanguageCode = "ar"
                        },
                        new
                        {
                            Id = 17,
                            AppSettingId = 9,
                            Key = "Instagram",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 18,
                            AppSettingId = 9,
                            Key = "انستغرام",
                            LanguageCode = "ar"
                        },
                        new
                        {
                            Id = 19,
                            AppSettingId = 10,
                            Key = "LinkedIn",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 20,
                            AppSettingId = 10,
                            Key = "لينكدإن",
                            LanguageCode = "ar"
                        },
                        new
                        {
                            Id = 21,
                            AppSettingId = 11,
                            Key = "Snapchat",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 22,
                            AppSettingId = 11,
                            Key = "سناب شات",
                            LanguageCode = "ar"
                        },
                        new
                        {
                            Id = 23,
                            AppSettingId = 12,
                            Key = "Twitter",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 24,
                            AppSettingId = 12,
                            Key = "تويتر",
                            LanguageCode = "ar"
                        },
                        new
                        {
                            Id = 25,
                            AppSettingId = 13,
                            Key = "YouTube",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 26,
                            AppSettingId = 13,
                            Key = "يوتيوب",
                            LanguageCode = "ar"
                        },
                        new
                        {
                            Id = 27,
                            AppSettingId = 14,
                            Key = "Cash on Delivery Fees",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 28,
                            AppSettingId = 14,
                            Key = "رسوم الدفع عند الاستلام",
                            LanguageCode = "ar"
                        },
                        new
                        {
                            Id = 29,
                            AppSettingId = 15,
                            Key = "Default Currency",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 30,
                            AppSettingId = 15,
                            Key = "العملة الافتراضية",
                            LanguageCode = "ar"
                        },
                        new
                        {
                            Id = 31,
                            AppSettingId = 16,
                            Key = "Timezone",
                            LanguageCode = "en"
                        },
                        new
                        {
                            Id = 32,
                            AppSettingId = 16,
                            Key = "المنطقة الزمنية",
                            LanguageCode = "ar"
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.AttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.ToTable("AttributeValues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttributeId = 1,
                            Code = "Red",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            AttributeId = 1,
                            Code = "Black",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            AttributeId = 1,
                            Code = "Green",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            AttributeId = 2,
                            Code = "XL",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 5,
                            AttributeId = 2,
                            Code = "XXL",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 6,
                            AttributeId = 2,
                            Code = "XXXL",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 7,
                            AttributeId = 3,
                            Code = "ZARA",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 8,
                            AttributeId = 3,
                            Code = "MAX",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 9,
                            AttributeId = 4,
                            Code = "FERRARI",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 10,
                            AttributeId = 4,
                            Code = "TOYOTA",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.AttributeValueTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeValueId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AttributeValueId");

                    b.ToTable("AttributeValueTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttributeValueId = 1,
                            LanguageCode = "ar",
                            Name = "أحمر"
                        },
                        new
                        {
                            Id = 2,
                            AttributeValueId = 2,
                            LanguageCode = "ar",
                            Name = "أسود"
                        },
                        new
                        {
                            Id = 3,
                            AttributeValueId = 3,
                            LanguageCode = "ar",
                            Name = "أخضر"
                        },
                        new
                        {
                            Id = 4,
                            AttributeValueId = 4,
                            LanguageCode = "ar",
                            Name = "إكس لارج"
                        },
                        new
                        {
                            Id = 5,
                            AttributeValueId = 5,
                            LanguageCode = "ar",
                            Name = "إكس إكس لارج"
                        },
                        new
                        {
                            Id = 6,
                            AttributeValueId = 6,
                            LanguageCode = "ar",
                            Name = "إكس إكس إكس لارج"
                        },
                        new
                        {
                            Id = 7,
                            AttributeValueId = 7,
                            LanguageCode = "ar",
                            Name = "زارا"
                        },
                        new
                        {
                            Id = 8,
                            AttributeValueId = 8,
                            LanguageCode = "ar",
                            Name = "ماكس"
                        },
                        new
                        {
                            Id = 9,
                            AttributeValueId = 9,
                            LanguageCode = "ar",
                            Name = "فيراري"
                        },
                        new
                        {
                            Id = 10,
                            AttributeValueId = 10,
                            LanguageCode = "ar",
                            Name = "تويوتا"
                        },
                        new
                        {
                            Id = 11,
                            AttributeValueId = 1,
                            LanguageCode = "en",
                            Name = "Red"
                        },
                        new
                        {
                            Id = 12,
                            AttributeValueId = 2,
                            LanguageCode = "en",
                            Name = "Black"
                        },
                        new
                        {
                            Id = 13,
                            AttributeValueId = 3,
                            LanguageCode = "en",
                            Name = "Green"
                        },
                        new
                        {
                            Id = 14,
                            AttributeValueId = 4,
                            LanguageCode = "en",
                            Name = "XL"
                        },
                        new
                        {
                            Id = 15,
                            AttributeValueId = 5,
                            LanguageCode = "en",
                            Name = "XXL"
                        },
                        new
                        {
                            Id = 16,
                            AttributeValueId = 6,
                            LanguageCode = "en",
                            Name = "XXXL"
                        },
                        new
                        {
                            Id = 17,
                            AttributeValueId = 7,
                            LanguageCode = "en",
                            Name = "ZARA"
                        },
                        new
                        {
                            Id = 18,
                            AttributeValueId = 8,
                            LanguageCode = "en",
                            Name = "MAX"
                        },
                        new
                        {
                            Id = 19,
                            AttributeValueId = 9,
                            LanguageCode = "en",
                            Name = "FERRARI"
                        },
                        new
                        {
                            Id = 20,
                            AttributeValueId = 10,
                            LanguageCode = "en",
                            Name = "TOYOTA"
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.HasIndex("VariantId");

                    b.ToTable("CartItems", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeal")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeal = false,
                            Slug = "Uncategorized"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeal = false,
                            Slug = "electronics"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeal = false,
                            ParentId = 1,
                            Slug = "tV"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeal = false,
                            ParentId = 1,
                            Slug = "laptops"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeal = false,
                            ParentId = 1,
                            Slug = "fridges"
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.CategoryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("CategoryTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            Description = "Dummy text for the printing and typesetting industry.",
                            LanguageCode = "en",
                            Name = "UnCategorized"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Description = "Dummy text for the printing and typesetting industry.",
                            LanguageCode = "en",
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            Description = "Dummy text for the printing and typesetting industry.",
                            LanguageCode = "en",
                            Name = "TV"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 4,
                            Description = "Dummy text for the printing and typesetting industry.",
                            LanguageCode = "en",
                            Name = "Laptops"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 5,
                            Description = "Dummy text for the printing and typesetting industry.",
                            LanguageCode = "en",
                            Name = "Fridges"
                        },
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "نص تجريبي لصناعة الطباعة والتنضيد.",
                            LanguageCode = "ar",
                            Name = "غير مصنف"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "نص تجريبي لصناعة الطباعة والتنضيد.",
                            LanguageCode = "ar",
                            Name = "إلكترونيات"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            Description = "نص تجريبي لصناعة الطباعة والتنضيد.",
                            LanguageCode = "ar",
                            Name = "تلفزيون"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            Description = "نص تجريبي لصناعة الطباعة والتنضيد.",
                            LanguageCode = "ar",
                            Name = "حاسبات محمولة"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            Description = "نص تجريبي لصناعة الطباعة والتنضيد.",
                            LanguageCode = "ar",
                            Name = "ثلاجات"
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StateId", "Name")
                        .IsUnique();

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Downtown Dubai",
                            StateId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Marina",
                            StateId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Nasr City",
                            StateId = 3
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.CityTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CityTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            LanguageCode = "ar",
                            Name = "وسط مدينة دبي"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 2,
                            LanguageCode = "ar",
                            Name = "مارينا"
                        },
                        new
                        {
                            Id = 3,
                            CityId = 3,
                            LanguageCode = "ar",
                            Name = "مدينة نصر"
                        },
                        new
                        {
                            Id = 4,
                            CityId = 1,
                            LanguageCode = "en",
                            Name = "Downtown Dubai"
                        },
                        new
                        {
                            Id = 5,
                            CityId = 2,
                            LanguageCode = "en",
                            Name = "Marina"
                        },
                        new
                        {
                            Id = 6,
                            CityId = 3,
                            LanguageCode = "en",
                            Name = "Nasr City"
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Countries", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "AE",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PhoneCode = "+971"
                        },
                        new
                        {
                            Id = 2,
                            Code = "EG",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            PhoneCode = "+20"
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.CountryTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LanguageCode");

                    b.ToTable("CountryTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Currency = "",
                            LanguageCode = "ar",
                            Name = "الإمارات"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            Currency = "",
                            LanguageCode = "ar",
                            Name = "مصر"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Currency = "",
                            LanguageCode = "en",
                            Name = "United Arab Emirates"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            Currency = "",
                            LanguageCode = "en",
                            Name = "Egypt"
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.Coupon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DiscountPrecentage")
                        .HasColumnType("int");

                    b.Property<int>("DiscountType")
                        .HasColumnType("int");

                    b.Property<decimal?>("DiscountValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForFirstOrderOnly")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxDiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("MaxUsagePerUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<decimal?>("MinimumOrderAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Coupons", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "FIRST50",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrecentage = 50,
                            DiscountType = 1,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            IsForFirstOrderOnly = true,
                            MaxDiscountAmount = 100m,
                            MaxUsagePerUser = 1,
                            MinimumOrderAmount = 50m,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Code = "SAVE20",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountPrecentage = 20,
                            DiscountType = 1,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            IsForFirstOrderOnly = false,
                            MaxDiscountAmount = 200m,
                            MaxUsagePerUser = 5,
                            MinimumOrderAmount = 100m,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Code = "FLAT100",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DiscountType = 0,
                            DiscountValue = 100m,
                            EndDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            IsDeleted = false,
                            IsForFirstOrderOnly = false,
                            MaxDiscountAmount = 100m,
                            MaxUsagePerUser = 3,
                            MinimumOrderAmount = 200m,
                            StartDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.CouponTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("TermsAndConditions")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.ToTable("CouponTranslations", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.CouponUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CouponId")
                        .HasColumnType("int");

                    b.Property<int>("UsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime>("UsedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("UserId");

                    b.ToTable("CouponUser", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.FailedTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FailedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Try")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("FailedTasks", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("InnerException")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Logs", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.LogTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExceptionMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("LogId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LogId");

                    b.ToTable("LogTranslations", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.NotificationTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationTranslations", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Coupon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("CouponDiscountAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int?>("CouponId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("FinalAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("PointsDiscountAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<int>("PointsUsed")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("SaleDiscountAmount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("ShAddressCity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShAddressCountry")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShAddressFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShAddressStreet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShAddressZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ShippingMethodCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShippingMethodDelieveryDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShippingMethodId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmountAfterSale")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<decimal>("TotalAmountBeforeSale")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WalletAmountUsed")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("CouponId");

                    b.HasIndex("ReferenceNumber")
                        .IsUnique();

                    b.HasIndex("ShippingMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<string>("ProductAttribute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductSlug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("WalletAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.OrderTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DriverPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("OrderTracking");
                });

            modelBuilder.Entity("OnlineStore.Models.PasswordReset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Used")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.ToTable("PasswordResets", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OrderId")
                        .IsUnique();

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.PaymentTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("PaymentId");

                    b.ToTable("PaymentTransltions", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("SalePrice")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 1500m,
                            SKU = "SKU1001",
                            Slug = "smart-tv",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 200m,
                            SKU = "SKU1002",
                            Slug = "wireless-headphones",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 2500m,
                            SKU = "SKU1003",
                            Slug = "laptop-pro-15",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 999m,
                            SKU = "SKU1004",
                            Slug = "smartphone-x12",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 500m,
                            SKU = "SKU1005",
                            Slug = "gaming-console-z",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 80m,
                            SKU = "SKU1006",
                            Slug = "bluetooth-speaker",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 300m,
                            SKU = "SKU1007",
                            Slug = "4k-action-camera",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 299m,
                            SKU = "SKU1008",
                            Slug = "smart-watch-s9",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 350m,
                            SKU = "SKU1009",
                            Slug = "vr-headset",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 1200m,
                            SKU = "SKU1010",
                            Slug = "drone-camera",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 150m,
                            SKU = "SKU1011",
                            Slug = "e-reader",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 130m,
                            SKU = "SKU1012",
                            Slug = "smart-home-hub",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 120m,
                            SKU = "SKU1013",
                            Slug = "wireless-router",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 1800m,
                            SKU = "SKU1014",
                            Slug = "desktop-pc",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 75m,
                            SKU = "SKU1015",
                            Slug = "portable-hard-drive",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 170m,
                            SKU = "SKU1016",
                            Slug = "noise-cancelling-earbuds",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 220m,
                            SKU = "SKU1017",
                            Slug = "smart-thermostat",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 900m,
                            SKU = "SKU1018",
                            Slug = "digital-camera",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 850m,
                            SKU = "SKU1019",
                            Slug = "tablet-pro",
                            Type = "Simple"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDeleted = false,
                            Price = 60m,
                            SKU = "SKU1020",
                            Slug = "smart-light-bulbs",
                            Type = "Simple"
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.ProductAttribute", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ProductAttributes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Color",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 2,
                            Code = "Size",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 3,
                            Code = "Brand",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        },
                        new
                        {
                            Id = 4,
                            Code = "Model",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.ProductAttributeTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductAttributeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductAttributeId");

                    b.ToTable("ProductAttributeTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageCode = "ar",
                            Name = "اللون",
                            ProductAttributeId = 1
                        },
                        new
                        {
                            Id = 2,
                            LanguageCode = "ar",
                            Name = "الحجم",
                            ProductAttributeId = 2
                        },
                        new
                        {
                            Id = 3,
                            LanguageCode = "ar",
                            Name = "العلامة التجارية",
                            ProductAttributeId = 3
                        },
                        new
                        {
                            Id = 4,
                            LanguageCode = "ar",
                            Name = "الموديل",
                            ProductAttributeId = 4
                        },
                        new
                        {
                            Id = 5,
                            LanguageCode = "en",
                            Name = "Color",
                            ProductAttributeId = 1
                        },
                        new
                        {
                            Id = 6,
                            LanguageCode = "en",
                            Name = "Size",
                            ProductAttributeId = 2
                        },
                        new
                        {
                            Id = 7,
                            LanguageCode = "en",
                            Name = "Brand",
                            ProductAttributeId = 3
                        },
                        new
                        {
                            Id = 8,
                            LanguageCode = "en",
                            Name = "Model",
                            ProductAttributeId = 4
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.ProductTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "Samsung",
                            Description = "Lorem Ipsum is simply dummy text of the printing and typesetting industry.",
                            LanguageCode = "en",
                            Name = "Smart TV",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            Brand = "سامسونج",
                            Description = "لوريم إيبسوم هو نص شكلي في صناعة الطباعة والتنضيد.",
                            LanguageCode = "ar",
                            Name = "تلفاز ذكي",
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            Brand = "Sony",
                            Description = "High-quality wireless sound with noise cancellation.",
                            LanguageCode = "en",
                            Name = "Wireless Headphones",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 4,
                            Brand = "سوني",
                            Description = "صوت لاسلكي عالي الجودة مع إلغاء الضوضاء.",
                            LanguageCode = "ar",
                            Name = "سماعات لاسلكية",
                            ProductId = 2
                        },
                        new
                        {
                            Id = 5,
                            Brand = "Dell",
                            Description = "Powerful performance with sleek design.",
                            LanguageCode = "en",
                            Name = "Laptop Pro 15",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 6,
                            Brand = "ديل",
                            Description = "أداء قوي مع تصميم أنيق.",
                            LanguageCode = "ar",
                            Name = "حاسوب محمول برو 15",
                            ProductId = 3
                        },
                        new
                        {
                            Id = 7,
                            Brand = "Apple",
                            Description = "Next-gen smartphone with OLED display.",
                            LanguageCode = "en",
                            Name = "Smartphone X12",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 8,
                            Brand = "آبل",
                            Description = "هاتف ذكي من الجيل القادم بشاشة OLED.",
                            LanguageCode = "ar",
                            Name = "هاتف ذكي X12",
                            ProductId = 4
                        },
                        new
                        {
                            Id = 9,
                            Brand = "Microsoft",
                            Description = "Immersive gaming experience.",
                            LanguageCode = "en",
                            Name = "Gaming Console Z",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 10,
                            Brand = "مايكروسوفت",
                            Description = "تجربة ألعاب غامرة.",
                            LanguageCode = "ar",
                            Name = "جهاز ألعاب Z",
                            ProductId = 5
                        },
                        new
                        {
                            Id = 11,
                            Brand = "JBL",
                            Description = "Portable speaker with deep bass.",
                            LanguageCode = "en",
                            Name = "Bluetooth Speaker",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 12,
                            Brand = "جي بي إل",
                            Description = "مكبر صوت محمول مع باس عميق.",
                            LanguageCode = "ar",
                            Name = "مكبر صوت بلوتوث",
                            ProductId = 6
                        },
                        new
                        {
                            Id = 13,
                            Brand = "GoPro",
                            Description = "Capture high-resolution outdoor adventures.",
                            LanguageCode = "en",
                            Name = "4K Action Camera",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 14,
                            Brand = "جو برو",
                            Description = "التقط مغامرات خارجية عالية الدقة.",
                            LanguageCode = "ar",
                            Name = "كاميرا أكشن 4K",
                            ProductId = 7
                        },
                        new
                        {
                            Id = 15,
                            Brand = "Fitbit",
                            Description = "Fitness and health tracking on your wrist.",
                            LanguageCode = "en",
                            Name = "Smart Watch S9",
                            ProductId = 8
                        },
                        new
                        {
                            Id = 16,
                            Brand = "فيتبيت",
                            Description = "تتبع اللياقة والصحة على معصمك.",
                            LanguageCode = "ar",
                            Name = "ساعة ذكية S9",
                            ProductId = 8
                        },
                        new
                        {
                            Id = 17,
                            Brand = "Meta",
                            Description = "Experience virtual reality at its best.",
                            LanguageCode = "en",
                            Name = "VR Headset",
                            ProductId = 9
                        },
                        new
                        {
                            Id = 18,
                            Brand = "ميتا",
                            Description = "اختبر الواقع الافتراضي بأفضل صورة.",
                            LanguageCode = "ar",
                            Name = "سماعة الواقع الافتراضي",
                            ProductId = 9
                        },
                        new
                        {
                            Id = 19,
                            Brand = "DJI",
                            Description = "Fly and record stunning aerial shots.",
                            LanguageCode = "en",
                            Name = "Drone with Camera",
                            ProductId = 10
                        },
                        new
                        {
                            Id = 20,
                            Brand = "دي جي آي",
                            Description = "حلّق وسجل لقطات جوية مذهلة.",
                            LanguageCode = "ar",
                            Name = "طائرة بدون طيار مع كاميرا",
                            ProductId = 10
                        },
                        new
                        {
                            Id = 21,
                            Brand = "Amazon",
                            Description = "Read thousands of books on the go.",
                            LanguageCode = "en",
                            Name = "E-Reader",
                            ProductId = 11
                        },
                        new
                        {
                            Id = 22,
                            Brand = "أمازون",
                            Description = "اقرأ آلاف الكتب أثناء التنقل.",
                            LanguageCode = "ar",
                            Name = "قارئ إلكتروني",
                            ProductId = 11
                        },
                        new
                        {
                            Id = 23,
                            Brand = "Google",
                            Description = "Control all your smart devices easily.",
                            LanguageCode = "en",
                            Name = "Smart Home Hub",
                            ProductId = 12
                        },
                        new
                        {
                            Id = 24,
                            Brand = "جوجل",
                            Description = "تحكم في جميع أجهزتك الذكية بسهولة.",
                            LanguageCode = "ar",
                            Name = "مركز المنزل الذكي",
                            ProductId = 12
                        },
                        new
                        {
                            Id = 25,
                            Brand = "TP-Link",
                            Description = "Fast, reliable Wi-Fi connection.",
                            LanguageCode = "en",
                            Name = "Wireless Router",
                            ProductId = 13
                        },
                        new
                        {
                            Id = 26,
                            Brand = "تي بي-لينك",
                            Description = "اتصال واي فاي سريع وموثوق.",
                            LanguageCode = "ar",
                            Name = "راوتر لاسلكي",
                            ProductId = 13
                        },
                        new
                        {
                            Id = 27,
                            Brand = "HP",
                            Description = "Powerful workstation for home or office.",
                            LanguageCode = "en",
                            Name = "Desktop PC",
                            ProductId = 14
                        },
                        new
                        {
                            Id = 28,
                            Brand = "إتش بي",
                            Description = "محطة عمل قوية للمنزل أو المكتب.",
                            LanguageCode = "ar",
                            Name = "كمبيوتر مكتبي",
                            ProductId = 14
                        },
                        new
                        {
                            Id = 29,
                            Brand = "Seagate",
                            Description = "1TB storage on the go.",
                            LanguageCode = "en",
                            Name = "Portable Hard Drive",
                            ProductId = 15
                        },
                        new
                        {
                            Id = 30,
                            Brand = "سيجيت",
                            Description = "تخزين 1 تيرابايت أثناء التنقل.",
                            LanguageCode = "ar",
                            Name = "قرص صلب محمول",
                            ProductId = 15
                        },
                        new
                        {
                            Id = 31,
                            Brand = "Bose",
                            Description = "Compact and immersive sound.",
                            LanguageCode = "en",
                            Name = "Noise Cancelling Earbuds",
                            ProductId = 16
                        },
                        new
                        {
                            Id = 32,
                            Brand = "بوز",
                            Description = "صوت مدمج وغامر.",
                            LanguageCode = "ar",
                            Name = "سماعات أذن عازلة للضوضاء",
                            ProductId = 16
                        },
                        new
                        {
                            Id = 33,
                            Brand = "Nest",
                            Description = "Control your home's temperature remotely.",
                            LanguageCode = "en",
                            Name = "Smart Thermostat",
                            ProductId = 17
                        },
                        new
                        {
                            Id = 34,
                            Brand = "نيست",
                            Description = "تحكم في درجة حرارة منزلك عن بُعد.",
                            LanguageCode = "ar",
                            Name = "ثرموستات ذكي",
                            ProductId = 17
                        },
                        new
                        {
                            Id = 35,
                            Brand = "Canon",
                            Description = "Perfect for amateur and professional photography.",
                            LanguageCode = "en",
                            Name = "Digital Camera",
                            ProductId = 18
                        },
                        new
                        {
                            Id = 36,
                            Brand = "كانون",
                            Description = "مثالية للتصوير الهواة والمحترفين.",
                            LanguageCode = "ar",
                            Name = "كاميرا رقمية",
                            ProductId = 18
                        },
                        new
                        {
                            Id = 37,
                            Brand = "Apple",
                            Description = "Large screen tablet with stylus support.",
                            LanguageCode = "en",
                            Name = "Tablet Pro",
                            ProductId = 19
                        },
                        new
                        {
                            Id = 38,
                            Brand = "آبل",
                            Description = "تابلت بشاشة كبيرة مع دعم القلم.",
                            LanguageCode = "ar",
                            Name = "تابلت برو",
                            ProductId = 19
                        },
                        new
                        {
                            Id = 39,
                            Brand = "Philips",
                            Description = "Automate your lighting with your phone.",
                            LanguageCode = "en",
                            Name = "Smart Light Bulbs",
                            ProductId = 20
                        },
                        new
                        {
                            Id = 40,
                            Brand = "فيلبس",
                            Description = "أتمتة الإضاءة عبر هاتفك.",
                            LanguageCode = "ar",
                            Name = "لمبات ذكية",
                            ProductId = 20
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.ProductVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal?>("SalePrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("Price", "SalePrice");

                    b.ToTable("ProductVariants", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDefault = false,
                            Price = 0m,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDefault = false,
                            Price = 0m,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDefault = false,
                            Price = 0m,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDefault = false,
                            Price = 0m,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDefault = false,
                            Price = 0m,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDefault = false,
                            Price = 0m,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDefault = false,
                            Price = 0m,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDefault = false,
                            Price = 0m,
                            ProductId = 4
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDefault = false,
                            Price = 0m,
                            ProductId = 5
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ImageUrl = "default.png",
                            IsDefault = false,
                            Price = 0m,
                            ProductId = 5
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Token");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Return", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RefundType")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ReferenceNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Returns", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.ReturnAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ReturnItemId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReturnItemId");

                    b.ToTable("ReturnAttachements", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.ReturnItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ReturnId")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderItemId")
                        .IsUnique();

                    b.HasIndex("ReturnId");

                    b.ToTable("ReturnItems", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.ReturnTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ReturnId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ReturnId")
                        .IsUnique();

                    b.ToTable("ReturnTracking");
                });

            modelBuilder.Entity("OnlineStore.Models.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.ReviewAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ReviewId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id");

                    b.HasIndex("ReviewId");

                    b.ToTable("ReviewAttachments", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.ShippingMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryTime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("ShippingMethods", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.ShippingMethodTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ShippingMethodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ShippingMethodId");

                    b.ToTable("ShippingMethodTranslations", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.SiteSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SiteSettings", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CountryId");

                    b.ToTable("States", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "DXB",
                            CountryId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Code = "ABU",
                            CountryId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Code = "CAI",
                            CountryId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.StateTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageCode");

                    b.HasIndex("StateId");

                    b.ToTable("StateTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageCode = "ar",
                            Name = "دبي",
                            StateId = 1
                        },
                        new
                        {
                            Id = 2,
                            LanguageCode = "ar",
                            Name = "أبو ظبي",
                            StateId = 2
                        },
                        new
                        {
                            Id = 3,
                            LanguageCode = "ar",
                            Name = "القاهرة",
                            StateId = 3
                        },
                        new
                        {
                            Id = 4,
                            LanguageCode = "en",
                            Name = "Dubai",
                            StateId = 1
                        },
                        new
                        {
                            Id = 5,
                            LanguageCode = "en",
                            Name = "Abu Dhabi",
                            StateId = 2
                        },
                        new
                        {
                            Id = 6,
                            LanguageCode = "en",
                            Name = "Cairo",
                            StateId = 3
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastRestocked")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastStockCount")
                        .HasColumnType("datetime2");

                    b.Property<int>("MinimumStockLevel")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.Property<int>("ReservedQuantity")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("TotalQuantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitCost")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantId")
                        .IsUnique();

                    b.HasIndex("WarehouseId");

                    b.HasIndex("ProductVariantId", "WarehouseId");

                    b.ToTable("Stock");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastRestocked = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastStockCount = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStockLevel = 20,
                            ProductVariantId = 1,
                            ReservedQuantity = 10,
                            RowVersion = new byte[0],
                            TotalQuantity = 100,
                            UnitCost = 50.0m,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastRestocked = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastStockCount = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStockLevel = 25,
                            ProductVariantId = 2,
                            ReservedQuantity = 15,
                            RowVersion = new byte[0],
                            TotalQuantity = 120,
                            UnitCost = 55.0m,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastRestocked = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastStockCount = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStockLevel = 10,
                            ProductVariantId = 3,
                            ReservedQuantity = 5,
                            RowVersion = new byte[0],
                            TotalQuantity = 80,
                            UnitCost = 40.0m,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastRestocked = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastStockCount = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStockLevel = 10,
                            ProductVariantId = 4,
                            ReservedQuantity = 0,
                            RowVersion = new byte[0],
                            TotalQuantity = 60,
                            UnitCost = 45.0m,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastRestocked = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastStockCount = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStockLevel = 30,
                            ProductVariantId = 5,
                            ReservedQuantity = 20,
                            RowVersion = new byte[0],
                            TotalQuantity = 150,
                            UnitCost = 30.0m,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastRestocked = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastStockCount = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStockLevel = 15,
                            ProductVariantId = 6,
                            ReservedQuantity = 5,
                            RowVersion = new byte[0],
                            TotalQuantity = 90,
                            UnitCost = 35.0m,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastRestocked = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastStockCount = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStockLevel = 20,
                            ProductVariantId = 7,
                            ReservedQuantity = 10,
                            RowVersion = new byte[0],
                            TotalQuantity = 110,
                            UnitCost = 60.0m,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastRestocked = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastStockCount = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStockLevel = 25,
                            ProductVariantId = 8,
                            ReservedQuantity = 15,
                            RowVersion = new byte[0],
                            TotalQuantity = 130,
                            UnitCost = 65.0m,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastRestocked = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastStockCount = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStockLevel = 10,
                            ProductVariantId = 9,
                            ReservedQuantity = 5,
                            RowVersion = new byte[0],
                            TotalQuantity = 70,
                            UnitCost = 40.0m,
                            WarehouseId = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastRestocked = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastStockCount = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            MinimumStockLevel = 15,
                            ProductVariantId = 10,
                            ReservedQuantity = 10,
                            RowVersion = new byte[0],
                            TotalQuantity = 95,
                            UnitCost = 42.0m,
                            WarehouseId = 1
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.StockMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reference")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitCost")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("Reference");

                    b.HasIndex("StockId");

                    b.HasIndex("Type");

                    b.ToTable("StockMovements", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.SupportTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("AssignedToUserId")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resolution")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ResolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("TicketNumber")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("SupportTickets", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Tags", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "Electronics",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Code = "Smart",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            Code = "Electricity",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            Code = "White",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            Code = "Large",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            Code = "Good Deal",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.TagTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TagId");

                    b.ToTable("TagTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageCode = "ar",
                            Name = "إلكترونيات",
                            TagId = 1
                        },
                        new
                        {
                            Id = 2,
                            LanguageCode = "ar",
                            Name = "ذكي",
                            TagId = 2
                        },
                        new
                        {
                            Id = 3,
                            LanguageCode = "ar",
                            Name = "كهرباء",
                            TagId = 3
                        },
                        new
                        {
                            Id = 4,
                            LanguageCode = "ar",
                            Name = "أبيض",
                            TagId = 4
                        },
                        new
                        {
                            Id = 5,
                            LanguageCode = "ar",
                            Name = "كبير",
                            TagId = 5
                        },
                        new
                        {
                            Id = 6,
                            LanguageCode = "ar",
                            Name = "صفقة جيدة",
                            TagId = 6
                        },
                        new
                        {
                            Id = 7,
                            LanguageCode = "en",
                            Name = "Electronics",
                            TagId = 1
                        },
                        new
                        {
                            Id = 8,
                            LanguageCode = "en",
                            Name = "Smart",
                            TagId = 2
                        },
                        new
                        {
                            Id = 9,
                            LanguageCode = "en",
                            Name = "Electricity",
                            TagId = 3
                        },
                        new
                        {
                            Id = 10,
                            LanguageCode = "en",
                            Name = "White",
                            TagId = 4
                        },
                        new
                        {
                            Id = 11,
                            LanguageCode = "en",
                            Name = "Large",
                            TagId = 5
                        },
                        new
                        {
                            Id = 12,
                            LanguageCode = "en",
                            Name = "Good Deal",
                            TagId = 6
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.TicketMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFromStaff")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsInternal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("TicketId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketMessages", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Provider")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserAvailablePoints")
                        .HasColumnType("int");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("Email");

                    b.HasIndex("StateId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CityId = 1,
                            CountryId = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dalia@effortz.co",
                            FullName = "Dalia Ali",
                            IsActive = true,
                            IsDeleted = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFiMjDe70MmfsT4pSIO2bsgI3QYt6fnyGNRbkpTVi8e6vk+TzkhNNq6BUHT4P1p2Tw==",
                            PhoneNumber = "98988787",
                            StateId = 1,
                            UserAvailablePoints = 0,
                            UserType = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CityId = 3,
                            CountryId = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dalia@gmail.com",
                            FullName = "Dalia Ahmed",
                            IsActive = true,
                            IsDeleted = false,
                            PasswordHash = "AQAAAAIAAYagAAAAEFiMjDe70MmfsT4pSIO2bsgI3QYt6fnyGNRbkpTVi8e6vk+TzkhNNq6BUHT4P1p2Tw==",
                            PhoneNumber = "98988707",
                            StateId = 3,
                            UserAvailablePoints = 0,
                            UserType = "User"
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.UserPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Expired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ExpiryAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<byte>("Type")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserPoints", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.VariantAttributeValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<int>("AttributeValueId")
                        .HasColumnType("int");

                    b.Property<int>("ProductVariantId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("AttributeValueId");

                    b.HasIndex("ProductVariantId");

                    b.ToTable("VariantAttributeValues", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AttributeId = 1,
                            AttributeValueId = 1,
                            ProductVariantId = 1
                        },
                        new
                        {
                            Id = 2,
                            AttributeId = 2,
                            AttributeValueId = 5,
                            ProductVariantId = 1
                        },
                        new
                        {
                            Id = 3,
                            AttributeId = 1,
                            AttributeValueId = 2,
                            ProductVariantId = 2
                        },
                        new
                        {
                            Id = 4,
                            AttributeId = 2,
                            AttributeValueId = 6,
                            ProductVariantId = 2
                        },
                        new
                        {
                            Id = 5,
                            AttributeId = 3,
                            AttributeValueId = 9,
                            ProductVariantId = 3
                        },
                        new
                        {
                            Id = 6,
                            AttributeId = 1,
                            AttributeValueId = 1,
                            ProductVariantId = 3
                        },
                        new
                        {
                            Id = 7,
                            AttributeId = 2,
                            AttributeValueId = 5,
                            ProductVariantId = 4
                        },
                        new
                        {
                            Id = 8,
                            AttributeId = 3,
                            AttributeValueId = 10,
                            ProductVariantId = 5
                        },
                        new
                        {
                            Id = 9,
                            AttributeId = 1,
                            AttributeValueId = 2,
                            ProductVariantId = 6
                        },
                        new
                        {
                            Id = 10,
                            AttributeId = 2,
                            AttributeValueId = 6,
                            ProductVariantId = 7
                        },
                        new
                        {
                            Id = 11,
                            AttributeId = 3,
                            AttributeValueId = 9,
                            ProductVariantId = 8
                        },
                        new
                        {
                            Id = 12,
                            AttributeId = 1,
                            AttributeValueId = 1,
                            ProductVariantId = 9
                        },
                        new
                        {
                            Id = 13,
                            AttributeId = 2,
                            AttributeValueId = 5,
                            ProductVariantId = 10
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.WalletTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 4)
                        .HasColumnType("decimal(18,4)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions", (string)null);
                });

            modelBuilder.Entity("OnlineStore.Models.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Business Street",
                            City = "Downtown Dubai",
                            Code = "WH001",
                            Country = "United Arab Emirates",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouse@effortz.co",
                            IsActive = true,
                            IsDefault = true,
                            IsDeleted = false,
                            Name = "Main Warehouse",
                            Phone = "+971 50 123 4567",
                            State = "Dubai",
                            ZipCode = "00000"
                        },
                        new
                        {
                            Id = 2,
                            Address = "123 Business Street",
                            City = "Downtown Dubai",
                            Code = "WH002",
                            Country = "United Arab Emirates",
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "warehouse@effortz.co",
                            IsActive = true,
                            IsDefault = true,
                            IsDeleted = false,
                            Name = "Second Warehouse",
                            Phone = "+971 50 123 4567",
                            State = "Dubai",
                            ZipCode = "00000"
                        });
                });

            modelBuilder.Entity("OnlineStore.Models.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Wishlist");
                });

            modelBuilder.Entity("Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "user.add"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "user.update"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "user.list"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "user.show"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "user.delete"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "tag.add"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "tag.update"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "tag.list"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "tag.show"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "tag.delete"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "category.add"
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "category.update"
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "category.list"
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "category.show"
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "category.delete"
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "country.add"
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "country.update"
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "country.list"
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "country.show"
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "country.delete"
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "state.add"
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "state.update"
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "state.list"
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "state.show"
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "state.delete"
                        },
                        new
                        {
                            Id = 26,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "city.add"
                        },
                        new
                        {
                            Id = 27,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "city.update"
                        },
                        new
                        {
                            Id = 28,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "city.list"
                        },
                        new
                        {
                            Id = 29,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "city.show"
                        },
                        new
                        {
                            Id = 30,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "city.delete"
                        },
                        new
                        {
                            Id = 31,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "logs.list"
                        },
                        new
                        {
                            Id = 32,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "logs.show"
                        },
                        new
                        {
                            Id = 33,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "notification.list"
                        },
                        new
                        {
                            Id = 34,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "notification.show"
                        },
                        new
                        {
                            Id = 35,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "notification.delete"
                        },
                        new
                        {
                            Id = 36,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "notification.deleteAll"
                        },
                        new
                        {
                            Id = 37,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "settings.list"
                        },
                        new
                        {
                            Id = 38,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "settings.show"
                        },
                        new
                        {
                            Id = 39,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "settings.update"
                        },
                        new
                        {
                            Id = 40,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "review.list"
                        },
                        new
                        {
                            Id = 41,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "review.show"
                        },
                        new
                        {
                            Id = 42,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "review.accept"
                        },
                        new
                        {
                            Id = 43,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "attribute.add"
                        },
                        new
                        {
                            Id = 44,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "attribute.update"
                        },
                        new
                        {
                            Id = 45,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "attribute.list"
                        },
                        new
                        {
                            Id = 46,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "attribute.show"
                        },
                        new
                        {
                            Id = 47,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "attribute.delete"
                        },
                        new
                        {
                            Id = 48,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "attributeValue.add"
                        },
                        new
                        {
                            Id = 49,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "attributeValue.update"
                        },
                        new
                        {
                            Id = 50,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "attributeValue.list"
                        },
                        new
                        {
                            Id = 51,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "attributeValue.show"
                        },
                        new
                        {
                            Id = 52,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "attributeValue.delete"
                        },
                        new
                        {
                            Id = 53,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "role.add"
                        },
                        new
                        {
                            Id = 54,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "role.update"
                        },
                        new
                        {
                            Id = 55,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "role.list"
                        },
                        new
                        {
                            Id = 56,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "role.show"
                        },
                        new
                        {
                            Id = 57,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "role.delete"
                        },
                        new
                        {
                            Id = 58,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "product.add"
                        },
                        new
                        {
                            Id = 59,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "product.update"
                        },
                        new
                        {
                            Id = 60,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "product.list"
                        },
                        new
                        {
                            Id = 61,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "product.show"
                        },
                        new
                        {
                            Id = 62,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "product.delete"
                        },
                        new
                        {
                            Id = 63,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "order.list"
                        },
                        new
                        {
                            Id = 64,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "order.show"
                        },
                        new
                        {
                            Id = 65,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "order.update"
                        },
                        new
                        {
                            Id = 66,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "order.delete"
                        },
                        new
                        {
                            Id = 67,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "return.list"
                        },
                        new
                        {
                            Id = 68,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "return.show"
                        },
                        new
                        {
                            Id = 69,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "return.update"
                        },
                        new
                        {
                            Id = 70,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "return.delete"
                        },
                        new
                        {
                            Id = 71,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "coupon.add"
                        },
                        new
                        {
                            Id = 72,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "coupon.update"
                        },
                        new
                        {
                            Id = 73,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "coupon.list"
                        },
                        new
                        {
                            Id = 74,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "coupon.show"
                        },
                        new
                        {
                            Id = 75,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "coupon.delete"
                        },
                        new
                        {
                            Id = 76,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "warehouse.add"
                        },
                        new
                        {
                            Id = 77,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "warehouse.update"
                        },
                        new
                        {
                            Id = 78,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "warehouse.list"
                        },
                        new
                        {
                            Id = 79,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "warehouse.show"
                        },
                        new
                        {
                            Id = 80,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "warehouse.delete"
                        },
                        new
                        {
                            Id = 81,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "supportTicket.list"
                        },
                        new
                        {
                            Id = 82,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "supportTicket.show"
                        },
                        new
                        {
                            Id = 83,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "ticketMessage.add"
                        },
                        new
                        {
                            Id = 84,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "ticketMessage.list"
                        },
                        new
                        {
                            Id = 85,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "ticketMessage.show"
                        });
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.Property<int>("PermissionsId")
                        .HasColumnType("int");

                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.HasKey("PermissionsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("PermissionRole");

                    b.HasData(
                        new
                        {
                            PermissionsId = 1,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 2,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 3,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 4,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 5,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 6,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 7,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 8,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 9,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 10,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 11,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 12,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 13,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 14,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 15,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 16,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 17,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 18,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 19,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 20,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 21,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 22,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 23,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 24,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 25,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 26,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 27,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 28,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 29,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 30,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 31,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 32,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 33,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 34,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 35,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 36,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 37,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 38,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 39,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 40,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 41,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 42,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 43,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 44,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 45,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 46,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 47,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 48,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 49,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 50,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 51,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 52,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 53,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 54,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 55,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 56,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 57,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 58,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 59,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 60,
                            RolesId = 1
                        },
                        new
                        {
                            PermissionsId = 61,
                            RolesId = 1
                        });
                });

            modelBuilder.Entity("PermissionTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("PermissionTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "إضافة مستخدم",
                            LanguageCode = "ar",
                            Name = "إضافة مستخدم",
                            PermissionId = 1
                        },
                        new
                        {
                            Id = 2,
                            Description = "Add User",
                            LanguageCode = "en",
                            Name = "Add User",
                            PermissionId = 1
                        },
                        new
                        {
                            Id = 3,
                            Description = "تعديل مستخدم",
                            LanguageCode = "ar",
                            Name = "تعديل مستخدم",
                            PermissionId = 2
                        },
                        new
                        {
                            Id = 4,
                            Description = "Update User",
                            LanguageCode = "en",
                            Name = "Update User",
                            PermissionId = 2
                        },
                        new
                        {
                            Id = 5,
                            Description = "عرض المستخدمين",
                            LanguageCode = "ar",
                            Name = "عرض المستخدمين",
                            PermissionId = 3
                        },
                        new
                        {
                            Id = 6,
                            Description = "List Users",
                            LanguageCode = "en",
                            Name = "List Users",
                            PermissionId = 3
                        },
                        new
                        {
                            Id = 7,
                            Description = "عرض مستخدم",
                            LanguageCode = "ar",
                            Name = "عرض مستخدم",
                            PermissionId = 4
                        },
                        new
                        {
                            Id = 8,
                            Description = "Show User",
                            LanguageCode = "en",
                            Name = "Show User",
                            PermissionId = 4
                        },
                        new
                        {
                            Id = 9,
                            Description = "حذف مستخدم",
                            LanguageCode = "ar",
                            Name = "حذف مستخدم",
                            PermissionId = 5
                        },
                        new
                        {
                            Id = 10,
                            Description = "Delete User",
                            LanguageCode = "en",
                            Name = "Delete User",
                            PermissionId = 5
                        },
                        new
                        {
                            Id = 11,
                            Description = "إضافة تاج",
                            LanguageCode = "ar",
                            Name = "إضافة تاج",
                            PermissionId = 6
                        },
                        new
                        {
                            Id = 12,
                            Description = "Add Tag",
                            LanguageCode = "en",
                            Name = "Add Tag",
                            PermissionId = 6
                        },
                        new
                        {
                            Id = 13,
                            Description = "تعديل تاج",
                            LanguageCode = "ar",
                            Name = "تعديل تاج",
                            PermissionId = 7
                        },
                        new
                        {
                            Id = 14,
                            Description = "Update Tag",
                            LanguageCode = "en",
                            Name = "Update Tag",
                            PermissionId = 7
                        },
                        new
                        {
                            Id = 15,
                            Description = "عرض التاجات",
                            LanguageCode = "ar",
                            Name = "عرض التاجات",
                            PermissionId = 8
                        },
                        new
                        {
                            Id = 16,
                            Description = "List Tags",
                            LanguageCode = "en",
                            Name = "List Tags",
                            PermissionId = 8
                        },
                        new
                        {
                            Id = 17,
                            Description = "عرض تاج",
                            LanguageCode = "ar",
                            Name = "عرض تاج",
                            PermissionId = 9
                        },
                        new
                        {
                            Id = 18,
                            Description = "Show Tag",
                            LanguageCode = "en",
                            Name = "Show Tag",
                            PermissionId = 9
                        },
                        new
                        {
                            Id = 19,
                            Description = "حذف تاج",
                            LanguageCode = "ar",
                            Name = "حذف تاج",
                            PermissionId = 10
                        },
                        new
                        {
                            Id = 20,
                            Description = "Delete Tag",
                            LanguageCode = "en",
                            Name = "Delete Tag",
                            PermissionId = 10
                        },
                        new
                        {
                            Id = 21,
                            Description = "إضافة تصنيف",
                            LanguageCode = "ar",
                            Name = "إضافة تصنيف",
                            PermissionId = 11
                        },
                        new
                        {
                            Id = 22,
                            Description = "Add Category",
                            LanguageCode = "en",
                            Name = "Add Category",
                            PermissionId = 11
                        },
                        new
                        {
                            Id = 23,
                            Description = "تعديل تصنيف",
                            LanguageCode = "ar",
                            Name = "تعديل تصنيف",
                            PermissionId = 12
                        },
                        new
                        {
                            Id = 24,
                            Description = "Update Category",
                            LanguageCode = "en",
                            Name = "Update Category",
                            PermissionId = 12
                        },
                        new
                        {
                            Id = 25,
                            Description = "عرض التصنيفات",
                            LanguageCode = "ar",
                            Name = "عرض التصنيفات",
                            PermissionId = 13
                        },
                        new
                        {
                            Id = 26,
                            Description = "List Categories",
                            LanguageCode = "en",
                            Name = "List Categories",
                            PermissionId = 13
                        },
                        new
                        {
                            Id = 27,
                            Description = "عرض تصنيف",
                            LanguageCode = "ar",
                            Name = "عرض تصنيف",
                            PermissionId = 14
                        },
                        new
                        {
                            Id = 28,
                            Description = "Show Category",
                            LanguageCode = "en",
                            Name = "Show Category",
                            PermissionId = 14
                        },
                        new
                        {
                            Id = 29,
                            Description = "حذف تصنيف",
                            LanguageCode = "ar",
                            Name = "حذف تصنيف",
                            PermissionId = 15
                        },
                        new
                        {
                            Id = 30,
                            Description = "Delete Category",
                            LanguageCode = "en",
                            Name = "Delete Category",
                            PermissionId = 15
                        },
                        new
                        {
                            Id = 31,
                            Description = "إضافة دولة",
                            LanguageCode = "ar",
                            Name = "إضافة دولة",
                            PermissionId = 16
                        },
                        new
                        {
                            Id = 32,
                            Description = "Add Country",
                            LanguageCode = "en",
                            Name = "Add Country",
                            PermissionId = 16
                        },
                        new
                        {
                            Id = 33,
                            Description = "تعديل دولة",
                            LanguageCode = "ar",
                            Name = "تعديل دولة",
                            PermissionId = 17
                        },
                        new
                        {
                            Id = 34,
                            Description = "Update Country",
                            LanguageCode = "en",
                            Name = "Update Country",
                            PermissionId = 17
                        },
                        new
                        {
                            Id = 35,
                            Description = "عرض الدول",
                            LanguageCode = "ar",
                            Name = "عرض الدول",
                            PermissionId = 18
                        },
                        new
                        {
                            Id = 36,
                            Description = "List Countries",
                            LanguageCode = "en",
                            Name = "List Countries",
                            PermissionId = 18
                        },
                        new
                        {
                            Id = 37,
                            Description = "عرض دولة",
                            LanguageCode = "ar",
                            Name = "عرض دولة",
                            PermissionId = 19
                        },
                        new
                        {
                            Id = 38,
                            Description = "Show Country",
                            LanguageCode = "en",
                            Name = "Show Country",
                            PermissionId = 19
                        },
                        new
                        {
                            Id = 39,
                            Description = "حذف دولة",
                            LanguageCode = "ar",
                            Name = "حذف دولة",
                            PermissionId = 20
                        },
                        new
                        {
                            Id = 40,
                            Description = "Delete Country",
                            LanguageCode = "en",
                            Name = "Delete Country",
                            PermissionId = 20
                        },
                        new
                        {
                            Id = 41,
                            Description = "إضافة ولاية",
                            LanguageCode = "ar",
                            Name = "إضافة ولاية",
                            PermissionId = 21
                        },
                        new
                        {
                            Id = 42,
                            Description = "Add State",
                            LanguageCode = "en",
                            Name = "Add State",
                            PermissionId = 21
                        },
                        new
                        {
                            Id = 43,
                            Description = "تعديل ولاية",
                            LanguageCode = "ar",
                            Name = "تعديل ولاية",
                            PermissionId = 22
                        },
                        new
                        {
                            Id = 44,
                            Description = "Update State",
                            LanguageCode = "en",
                            Name = "Update State",
                            PermissionId = 22
                        },
                        new
                        {
                            Id = 45,
                            Description = "عرض الولايات",
                            LanguageCode = "ar",
                            Name = "عرض الولايات",
                            PermissionId = 23
                        },
                        new
                        {
                            Id = 46,
                            Description = "List States",
                            LanguageCode = "en",
                            Name = "List States",
                            PermissionId = 23
                        },
                        new
                        {
                            Id = 47,
                            Description = "عرض ولاية",
                            LanguageCode = "ar",
                            Name = "عرض ولاية",
                            PermissionId = 24
                        },
                        new
                        {
                            Id = 48,
                            Description = "Show State",
                            LanguageCode = "en",
                            Name = "Show State",
                            PermissionId = 24
                        },
                        new
                        {
                            Id = 49,
                            Description = "حذف ولاية",
                            LanguageCode = "ar",
                            Name = "حذف ولاية",
                            PermissionId = 25
                        },
                        new
                        {
                            Id = 50,
                            Description = "Delete State",
                            LanguageCode = "en",
                            Name = "Delete State",
                            PermissionId = 25
                        },
                        new
                        {
                            Id = 51,
                            Description = "إضافة مدينة",
                            LanguageCode = "ar",
                            Name = "إضافة مدينة",
                            PermissionId = 26
                        },
                        new
                        {
                            Id = 52,
                            Description = "Add City",
                            LanguageCode = "en",
                            Name = "Add City",
                            PermissionId = 26
                        },
                        new
                        {
                            Id = 53,
                            Description = "تعديل مدينة",
                            LanguageCode = "ar",
                            Name = "تعديل مدينة",
                            PermissionId = 27
                        },
                        new
                        {
                            Id = 54,
                            Description = "Update City",
                            LanguageCode = "en",
                            Name = "Update City",
                            PermissionId = 27
                        },
                        new
                        {
                            Id = 55,
                            Description = "عرض المدن",
                            LanguageCode = "ar",
                            Name = "عرض المدن",
                            PermissionId = 28
                        },
                        new
                        {
                            Id = 56,
                            Description = "List Cities",
                            LanguageCode = "en",
                            Name = "List Cities",
                            PermissionId = 28
                        },
                        new
                        {
                            Id = 57,
                            Description = "عرض مدينة",
                            LanguageCode = "ar",
                            Name = "عرض مدينة",
                            PermissionId = 29
                        },
                        new
                        {
                            Id = 58,
                            Description = "Show City",
                            LanguageCode = "en",
                            Name = "Show City",
                            PermissionId = 29
                        },
                        new
                        {
                            Id = 59,
                            Description = "حذف مدينة",
                            LanguageCode = "ar",
                            Name = "حذف مدينة",
                            PermissionId = 30
                        },
                        new
                        {
                            Id = 60,
                            Description = "Delete City",
                            LanguageCode = "en",
                            Name = "Delete City",
                            PermissionId = 30
                        },
                        new
                        {
                            Id = 61,
                            Description = "عرض السجلات",
                            LanguageCode = "ar",
                            Name = "عرض السجلات",
                            PermissionId = 31
                        },
                        new
                        {
                            Id = 62,
                            Description = "List Logs",
                            LanguageCode = "en",
                            Name = "List Logs",
                            PermissionId = 31
                        },
                        new
                        {
                            Id = 63,
                            Description = "عرض سجل",
                            LanguageCode = "ar",
                            Name = "عرض سجل",
                            PermissionId = 32
                        },
                        new
                        {
                            Id = 64,
                            Description = "Show Log",
                            LanguageCode = "en",
                            Name = "Show Log",
                            PermissionId = 32
                        },
                        new
                        {
                            Id = 65,
                            Description = "عرض الإشعارات",
                            LanguageCode = "ar",
                            Name = "عرض الإشعارات",
                            PermissionId = 33
                        },
                        new
                        {
                            Id = 66,
                            Description = "List Notifications",
                            LanguageCode = "en",
                            Name = "List Notifications",
                            PermissionId = 33
                        },
                        new
                        {
                            Id = 67,
                            Description = "عرض إشعار",
                            LanguageCode = "ar",
                            Name = "عرض إشعار",
                            PermissionId = 34
                        },
                        new
                        {
                            Id = 68,
                            Description = "Show Notification",
                            LanguageCode = "en",
                            Name = "Show Notification",
                            PermissionId = 34
                        },
                        new
                        {
                            Id = 69,
                            Description = "حذف إشعار",
                            LanguageCode = "ar",
                            Name = "حذف إشعار",
                            PermissionId = 35
                        },
                        new
                        {
                            Id = 70,
                            Description = "Delete Notification",
                            LanguageCode = "en",
                            Name = "Delete Notification",
                            PermissionId = 35
                        },
                        new
                        {
                            Id = 71,
                            Description = "حذف كل الإشعارات",
                            LanguageCode = "ar",
                            Name = "حذف كل الإشعارات",
                            PermissionId = 36
                        },
                        new
                        {
                            Id = 72,
                            Description = "Delete All Notifications",
                            LanguageCode = "en",
                            Name = "Delete All Notifications",
                            PermissionId = 36
                        },
                        new
                        {
                            Id = 73,
                            Description = "عرض الإعدادات",
                            LanguageCode = "ar",
                            Name = "عرض الإعدادات",
                            PermissionId = 37
                        },
                        new
                        {
                            Id = 74,
                            Description = "List Settings",
                            LanguageCode = "en",
                            Name = "List Settings",
                            PermissionId = 37
                        },
                        new
                        {
                            Id = 75,
                            Description = "عرض إعداد",
                            LanguageCode = "ar",
                            Name = "عرض إعداد",
                            PermissionId = 38
                        },
                        new
                        {
                            Id = 76,
                            Description = "Show Setting",
                            LanguageCode = "en",
                            Name = "Show Setting",
                            PermissionId = 38
                        },
                        new
                        {
                            Id = 77,
                            Description = "تعديل الإعدادات",
                            LanguageCode = "ar",
                            Name = "تعديل الإعدادات",
                            PermissionId = 39
                        },
                        new
                        {
                            Id = 78,
                            Description = "Update Settings",
                            LanguageCode = "en",
                            Name = "Update Settings",
                            PermissionId = 39
                        },
                        new
                        {
                            Id = 79,
                            Description = "عرض التقييمات",
                            LanguageCode = "ar",
                            Name = "عرض التقييمات",
                            PermissionId = 40
                        },
                        new
                        {
                            Id = 80,
                            Description = "List Reviews",
                            LanguageCode = "en",
                            Name = "List Reviews",
                            PermissionId = 40
                        },
                        new
                        {
                            Id = 81,
                            Description = "عرض تقييم",
                            LanguageCode = "ar",
                            Name = "عرض تقييم",
                            PermissionId = 41
                        },
                        new
                        {
                            Id = 82,
                            Description = "Show Review",
                            LanguageCode = "en",
                            Name = "Show Review",
                            PermissionId = 41
                        },
                        new
                        {
                            Id = 83,
                            Description = "قبول التقييم",
                            LanguageCode = "ar",
                            Name = "قبول التقييم",
                            PermissionId = 42
                        },
                        new
                        {
                            Id = 84,
                            Description = "Accept Review",
                            LanguageCode = "en",
                            Name = "Accept Review",
                            PermissionId = 42
                        },
                        new
                        {
                            Id = 85,
                            Description = "إضافة خاصية",
                            LanguageCode = "ar",
                            Name = "إضافة خاصية",
                            PermissionId = 43
                        },
                        new
                        {
                            Id = 86,
                            Description = "Add Attribute",
                            LanguageCode = "en",
                            Name = "Add Attribute",
                            PermissionId = 43
                        },
                        new
                        {
                            Id = 87,
                            Description = "تعديل خاصية",
                            LanguageCode = "ar",
                            Name = "تعديل خاصية",
                            PermissionId = 44
                        },
                        new
                        {
                            Id = 88,
                            Description = "Update Attribute",
                            LanguageCode = "en",
                            Name = "Update Attribute",
                            PermissionId = 44
                        },
                        new
                        {
                            Id = 89,
                            Description = "عرض الخصائص",
                            LanguageCode = "ar",
                            Name = "عرض الخصائص",
                            PermissionId = 45
                        },
                        new
                        {
                            Id = 90,
                            Description = "List Attributes",
                            LanguageCode = "en",
                            Name = "List Attributes",
                            PermissionId = 45
                        },
                        new
                        {
                            Id = 91,
                            Description = "عرض خاصية",
                            LanguageCode = "ar",
                            Name = "عرض خاصية",
                            PermissionId = 46
                        },
                        new
                        {
                            Id = 92,
                            Description = "Show Attribute",
                            LanguageCode = "en",
                            Name = "Show Attribute",
                            PermissionId = 46
                        },
                        new
                        {
                            Id = 93,
                            Description = "حذف خاصية",
                            LanguageCode = "ar",
                            Name = "حذف خاصية",
                            PermissionId = 47
                        },
                        new
                        {
                            Id = 94,
                            Description = "Delete Attribute",
                            LanguageCode = "en",
                            Name = "Delete Attribute",
                            PermissionId = 47
                        },
                        new
                        {
                            Id = 95,
                            Description = "إضافة قيمة خاصية",
                            LanguageCode = "ar",
                            Name = "إضافة قيمة خاصية",
                            PermissionId = 48
                        },
                        new
                        {
                            Id = 96,
                            Description = "Add Attribute Value",
                            LanguageCode = "en",
                            Name = "Add Attribute Value",
                            PermissionId = 48
                        },
                        new
                        {
                            Id = 97,
                            Description = "تعديل قيمة خاصية",
                            LanguageCode = "ar",
                            Name = "تعديل قيمة خاصية",
                            PermissionId = 49
                        },
                        new
                        {
                            Id = 98,
                            Description = "Update Attribute Value",
                            LanguageCode = "en",
                            Name = "Update Attribute Value",
                            PermissionId = 49
                        },
                        new
                        {
                            Id = 99,
                            Description = "عرض قيم الخصائص",
                            LanguageCode = "ar",
                            Name = "عرض قيم الخصائص",
                            PermissionId = 50
                        },
                        new
                        {
                            Id = 100,
                            Description = "List Attribute Values",
                            LanguageCode = "en",
                            Name = "List Attribute Values",
                            PermissionId = 50
                        },
                        new
                        {
                            Id = 101,
                            Description = "عرض قيمة خاصية",
                            LanguageCode = "ar",
                            Name = "عرض قيمة خاصية",
                            PermissionId = 51
                        },
                        new
                        {
                            Id = 102,
                            Description = "Show Attribute Value",
                            LanguageCode = "en",
                            Name = "Show Attribute Value",
                            PermissionId = 51
                        },
                        new
                        {
                            Id = 103,
                            Description = "حذف قيمة خاصية",
                            LanguageCode = "ar",
                            Name = "حذف قيمة خاصية",
                            PermissionId = 52
                        },
                        new
                        {
                            Id = 104,
                            Description = "Delete Attribute Value",
                            LanguageCode = "en",
                            Name = "Delete Attribute Value",
                            PermissionId = 52
                        },
                        new
                        {
                            Id = 105,
                            Description = "إضافة دور",
                            LanguageCode = "ar",
                            Name = "إضافة دور",
                            PermissionId = 53
                        },
                        new
                        {
                            Id = 106,
                            Description = "Add Role",
                            LanguageCode = "en",
                            Name = "Add Role",
                            PermissionId = 53
                        },
                        new
                        {
                            Id = 107,
                            Description = "تعديل دور",
                            LanguageCode = "ar",
                            Name = "تعديل دور",
                            PermissionId = 54
                        },
                        new
                        {
                            Id = 108,
                            Description = "Update Role",
                            LanguageCode = "en",
                            Name = "Update Role",
                            PermissionId = 54
                        },
                        new
                        {
                            Id = 109,
                            Description = "عرض الأدوار",
                            LanguageCode = "ar",
                            Name = "عرض الأدوار",
                            PermissionId = 55
                        },
                        new
                        {
                            Id = 110,
                            Description = "List Roles",
                            LanguageCode = "en",
                            Name = "List Roles",
                            PermissionId = 55
                        },
                        new
                        {
                            Id = 111,
                            Description = "عرض دور",
                            LanguageCode = "ar",
                            Name = "عرض دور",
                            PermissionId = 56
                        },
                        new
                        {
                            Id = 112,
                            Description = "Show Role",
                            LanguageCode = "en",
                            Name = "Show Role",
                            PermissionId = 56
                        },
                        new
                        {
                            Id = 113,
                            Description = "حذف دور",
                            LanguageCode = "ar",
                            Name = "حذف دور",
                            PermissionId = 57
                        },
                        new
                        {
                            Id = 114,
                            Description = "Delete Role",
                            LanguageCode = "en",
                            Name = "Delete Role",
                            PermissionId = 57
                        },
                        new
                        {
                            Id = 115,
                            Description = "إضافة منتج",
                            LanguageCode = "ar",
                            Name = "إضافة منتج",
                            PermissionId = 58
                        },
                        new
                        {
                            Id = 116,
                            Description = "Add Product",
                            LanguageCode = "en",
                            Name = "Add Product",
                            PermissionId = 58
                        },
                        new
                        {
                            Id = 117,
                            Description = "تعديل منتج",
                            LanguageCode = "ar",
                            Name = "تعديل منتج",
                            PermissionId = 59
                        },
                        new
                        {
                            Id = 118,
                            Description = "Update Product",
                            LanguageCode = "en",
                            Name = "Update Product",
                            PermissionId = 59
                        },
                        new
                        {
                            Id = 119,
                            Description = "عرض المنتجات",
                            LanguageCode = "ar",
                            Name = "عرض المنتجات",
                            PermissionId = 60
                        },
                        new
                        {
                            Id = 120,
                            Description = "List Products",
                            LanguageCode = "en",
                            Name = "List Products",
                            PermissionId = 60
                        },
                        new
                        {
                            Id = 121,
                            Description = "عرض منتج",
                            LanguageCode = "ar",
                            Name = "عرض منتج",
                            PermissionId = 61
                        },
                        new
                        {
                            Id = 122,
                            Description = "Show Product",
                            LanguageCode = "en",
                            Name = "Show Product",
                            PermissionId = 61
                        },
                        new
                        {
                            Id = 123,
                            Description = "حذف منتج",
                            LanguageCode = "ar",
                            Name = "حذف منتج",
                            PermissionId = 62
                        },
                        new
                        {
                            Id = 124,
                            Description = "Delete Product",
                            LanguageCode = "en",
                            Name = "Delete Product",
                            PermissionId = 62
                        },
                        new
                        {
                            Id = 125,
                            Description = "عرض الطلبات",
                            LanguageCode = "ar",
                            Name = "عرض الطلبات",
                            PermissionId = 63
                        },
                        new
                        {
                            Id = 126,
                            Description = "List Orders",
                            LanguageCode = "en",
                            Name = "List Orders",
                            PermissionId = 63
                        },
                        new
                        {
                            Id = 127,
                            Description = "عرض طلب",
                            LanguageCode = "ar",
                            Name = "عرض طلب",
                            PermissionId = 64
                        },
                        new
                        {
                            Id = 128,
                            Description = "Show Order",
                            LanguageCode = "en",
                            Name = "Show Order",
                            PermissionId = 64
                        },
                        new
                        {
                            Id = 129,
                            Description = "تعديل الطلب",
                            LanguageCode = "ar",
                            Name = "تعديل الطلب",
                            PermissionId = 65
                        },
                        new
                        {
                            Id = 130,
                            Description = "Update Order",
                            LanguageCode = "en",
                            Name = "Update Order",
                            PermissionId = 65
                        },
                        new
                        {
                            Id = 131,
                            Description = "حذف الطلب",
                            LanguageCode = "ar",
                            Name = "حذف الطلب",
                            PermissionId = 66
                        },
                        new
                        {
                            Id = 132,
                            Description = "Delete Order",
                            LanguageCode = "en",
                            Name = "Delete Order",
                            PermissionId = 66
                        },
                        new
                        {
                            Id = 133,
                            Description = "عرض المرتجعات",
                            LanguageCode = "ar",
                            Name = "عرض المرتجعات",
                            PermissionId = 67
                        },
                        new
                        {
                            Id = 134,
                            Description = "List Returns",
                            LanguageCode = "en",
                            Name = "List Returns",
                            PermissionId = 67
                        },
                        new
                        {
                            Id = 135,
                            Description = "عرض مرتجع",
                            LanguageCode = "ar",
                            Name = "عرض مرتجع",
                            PermissionId = 68
                        },
                        new
                        {
                            Id = 136,
                            Description = "Show Return",
                            LanguageCode = "en",
                            Name = "Show Return",
                            PermissionId = 68
                        },
                        new
                        {
                            Id = 137,
                            Description = "تعديل المرتجع",
                            LanguageCode = "ar",
                            Name = "تعديل المرتجع",
                            PermissionId = 69
                        },
                        new
                        {
                            Id = 138,
                            Description = "Update Return",
                            LanguageCode = "en",
                            Name = "Update Return",
                            PermissionId = 69
                        },
                        new
                        {
                            Id = 139,
                            Description = "حذف المرتجع",
                            LanguageCode = "ar",
                            Name = "حذف المرتجع",
                            PermissionId = 70
                        },
                        new
                        {
                            Id = 140,
                            Description = "Delete Return",
                            LanguageCode = "en",
                            Name = "Delete Return",
                            PermissionId = 70
                        },
                        new
                        {
                            Id = 141,
                            Description = "إضافة كوبون",
                            LanguageCode = "ar",
                            Name = "إضافة كوبون",
                            PermissionId = 71
                        },
                        new
                        {
                            Id = 142,
                            Description = "Add Coupon",
                            LanguageCode = "en",
                            Name = "Add Coupon",
                            PermissionId = 71
                        },
                        new
                        {
                            Id = 143,
                            Description = "تعديل كوبون",
                            LanguageCode = "ar",
                            Name = "تعديل كوبون",
                            PermissionId = 72
                        },
                        new
                        {
                            Id = 144,
                            Description = "Update Coupon",
                            LanguageCode = "en",
                            Name = "Update Coupon",
                            PermissionId = 72
                        },
                        new
                        {
                            Id = 145,
                            Description = "عرض الكوبونات",
                            LanguageCode = "ar",
                            Name = "عرض الكوبونات",
                            PermissionId = 73
                        },
                        new
                        {
                            Id = 146,
                            Description = "List Coupons",
                            LanguageCode = "en",
                            Name = "List Coupons",
                            PermissionId = 73
                        },
                        new
                        {
                            Id = 147,
                            Description = "عرض كوبون",
                            LanguageCode = "ar",
                            Name = "عرض كوبون",
                            PermissionId = 74
                        },
                        new
                        {
                            Id = 148,
                            Description = "Show Coupon",
                            LanguageCode = "en",
                            Name = "Show Coupon",
                            PermissionId = 74
                        },
                        new
                        {
                            Id = 149,
                            Description = "حذف كوبون",
                            LanguageCode = "ar",
                            Name = "حذف كوبون",
                            PermissionId = 75
                        },
                        new
                        {
                            Id = 150,
                            Description = "Delete Coupon",
                            LanguageCode = "en",
                            Name = "Delete Coupon",
                            PermissionId = 75
                        },
                        new
                        {
                            Id = 151,
                            Description = "إضافة مستودع",
                            LanguageCode = "ar",
                            Name = "إضافة مستودع",
                            PermissionId = 76
                        },
                        new
                        {
                            Id = 152,
                            Description = "Add Warehouse",
                            LanguageCode = "en",
                            Name = "Add Warehouse",
                            PermissionId = 76
                        },
                        new
                        {
                            Id = 153,
                            Description = "تعديل مستودع",
                            LanguageCode = "ar",
                            Name = "تعديل مستودع",
                            PermissionId = 77
                        },
                        new
                        {
                            Id = 154,
                            Description = "Update Warehouse",
                            LanguageCode = "en",
                            Name = "Update Warehouse",
                            PermissionId = 77
                        },
                        new
                        {
                            Id = 155,
                            Description = "عرض المستودعات",
                            LanguageCode = "ar",
                            Name = "عرض المستودعات",
                            PermissionId = 78
                        },
                        new
                        {
                            Id = 156,
                            Description = "List Warehouses",
                            LanguageCode = "en",
                            Name = "List Warehouses",
                            PermissionId = 78
                        },
                        new
                        {
                            Id = 157,
                            Description = "عرض مستودع",
                            LanguageCode = "ar",
                            Name = "عرض مستودع",
                            PermissionId = 79
                        },
                        new
                        {
                            Id = 158,
                            Description = "Show Warehouse",
                            LanguageCode = "en",
                            Name = "Show Warehouse",
                            PermissionId = 79
                        },
                        new
                        {
                            Id = 159,
                            Description = "حذف مستودع",
                            LanguageCode = "ar",
                            Name = "حذف مستودع",
                            PermissionId = 80
                        },
                        new
                        {
                            Id = 160,
                            Description = "Delete Warehouse",
                            LanguageCode = "en",
                            Name = "Delete Warehouse",
                            PermissionId = 80
                        },
                        new
                        {
                            Id = 161,
                            Description = "عرض التذاكر",
                            LanguageCode = "ar",
                            Name = "عرض التذاكر",
                            PermissionId = 81
                        },
                        new
                        {
                            Id = 162,
                            Description = "List Support Tickets",
                            LanguageCode = "en",
                            Name = "List Support Tickets",
                            PermissionId = 81
                        },
                        new
                        {
                            Id = 163,
                            Description = "عرض تذكرة",
                            LanguageCode = "ar",
                            Name = "عرض تذكرة",
                            PermissionId = 82
                        },
                        new
                        {
                            Id = 164,
                            Description = "Show Support Ticket",
                            LanguageCode = "en",
                            Name = "Show Support Ticket",
                            PermissionId = 82
                        },
                        new
                        {
                            Id = 165,
                            Description = "إضافة رسالة تذكرة",
                            LanguageCode = "ar",
                            Name = "إضافة رسالة تذكرة",
                            PermissionId = 83
                        },
                        new
                        {
                            Id = 166,
                            Description = "Add Ticket Message",
                            LanguageCode = "en",
                            Name = "Add Ticket Message",
                            PermissionId = 83
                        },
                        new
                        {
                            Id = 167,
                            Description = "عرض رسائل التذاكر",
                            LanguageCode = "ar",
                            Name = "عرض رسائل التذاكر",
                            PermissionId = 84
                        },
                        new
                        {
                            Id = 168,
                            Description = "List Ticket Messages",
                            LanguageCode = "en",
                            Name = "List Ticket Messages",
                            PermissionId = 84
                        },
                        new
                        {
                            Id = 169,
                            Description = "عرض رسالة تذكرة",
                            LanguageCode = "ar",
                            Name = "عرض رسالة تذكرة",
                            PermissionId = 85
                        },
                        new
                        {
                            Id = 170,
                            Description = "Show Ticket Message",
                            LanguageCode = "en",
                            Name = "Show Ticket Message",
                            PermissionId = 85
                        });
                });

            modelBuilder.Entity("ProductTag", b =>
                {
                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("TagsId")
                        .HasColumnType("int");

                    b.HasKey("ProductsId", "TagsId");

                    b.HasIndex("TagsId");

                    b.ToTable("ProductTag");

                    b.HasData(
                        new
                        {
                            ProductsId = 1,
                            TagsId = 1
                        },
                        new
                        {
                            ProductsId = 2,
                            TagsId = 1
                        },
                        new
                        {
                            ProductsId = 3,
                            TagsId = 2
                        },
                        new
                        {
                            ProductsId = 4,
                            TagsId = 2
                        },
                        new
                        {
                            ProductsId = 5,
                            TagsId = 3
                        });
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "SuperAdmin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Slug = "Admin"
                        });
                });

            modelBuilder.Entity("RoleTranslation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleTranslations", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "مدير",
                            LanguageCode = "ar",
                            Name = "مدير",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "رئيس المديرين",
                            LanguageCode = "ar",
                            Name = "رئيس المديرين",
                            RoleId = 2
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Admin",
                            LanguageCode = "en",
                            Name = "Admin",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Super Admin",
                            LanguageCode = "en",
                            Name = "Super Admin",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<int>("RolesId")
                        .HasColumnType("int");

                    b.Property<int>("UsersId")
                        .HasColumnType("int");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");

                    b.HasData(
                        new
                        {
                            RolesId = 1,
                            UsersId = 1
                        });
                });

            modelBuilder.Entity("CategoryProduct", b =>
                {
                    b.HasOne("OnlineStore.Models.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineStore.Models.Address", b =>
                {
                    b.HasOne("OnlineStore.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Models.AppSettingTranslation", b =>
                {
                    b.HasOne("OnlineStore.Models.AppSetting", "AppSetting")
                        .WithMany("Translations")
                        .HasForeignKey("AppSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppSetting");
                });

            modelBuilder.Entity("OnlineStore.Models.AttributeValue", b =>
                {
                    b.HasOne("OnlineStore.Models.ProductAttribute", "Attribute")
                        .WithMany("Values")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("OnlineStore.Models.AttributeValueTranslation", b =>
                {
                    b.HasOne("OnlineStore.Models.AttributeValue", "AttributeValue")
                        .WithMany("Translations")
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeValue");
                });

            modelBuilder.Entity("OnlineStore.Models.Cart", b =>
                {
                    b.HasOne("OnlineStore.Models.User", "User")
                        .WithOne("Cart")
                        .HasForeignKey("OnlineStore.Models.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Models.CartItem", b =>
                {
                    b.HasOne("OnlineStore.Models.Cart", "Cart")
                        .WithMany("Items")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Models.ProductVariant", "ProductVariant")
                        .WithMany()
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("OnlineStore.Models.Category", b =>
                {
                    b.HasOne("OnlineStore.Models.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("OnlineStore.Models.CategoryTranslation", b =>
                {
                    b.HasOne("OnlineStore.Models.Category", "Category")
                        .WithMany("Translations")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("OnlineStore.Models.City", b =>
                {
                    b.HasOne("OnlineStore.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("OnlineStore.Models.CityTranslation", b =>
                {
                    b.HasOne("OnlineStore.Models.City", "City")
                        .WithMany("Translations")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("OnlineStore.Models.CountryTranslation", b =>
                {
                    b.HasOne("OnlineStore.Models.Country", "Country")
                        .WithMany("Translations")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("OnlineStore.Models.CouponTranslation", b =>
                {
                    b.HasOne("OnlineStore.Models.Coupon", "Coupon")
                        .WithMany("Translations")
                        .HasForeignKey("CouponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("OnlineStore.Models.CouponUser", b =>
                {
                    b.HasOne("OnlineStore.Models.Coupon", "Coupon")
                        .WithMany("CouponUsers")
                        .HasForeignKey("CouponId");

                    b.HasOne("OnlineStore.Models.User", "User")
                        .WithMany("CouponUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Coupon");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Models.LogTranslation", b =>
                {
                    b.HasOne("OnlineStore.Models.Log", "Log")
                        .WithMany("Translations")
                        .HasForeignKey("LogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Log");
                });

            modelBuilder.Entity("OnlineStore.Models.Notification", b =>
                {
                    b.HasOne("OnlineStore.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Models.NotificationTranslation", b =>
                {
                    b.HasOne("OnlineStore.Models.Notification", "Notification")
                        .WithMany("Translations")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("OnlineStore.Models.Order", b =>
                {
                    b.HasOne("OnlineStore.Models.Coupon", null)
                        .WithMany("Orders")
                        .HasForeignKey("CouponId");

                    b.HasOne("OnlineStore.Models.ShippingMethod", null)
                        .WithMany("Orders")
                        .HasForeignKey("ShippingMethodId");

                    b.HasOne("OnlineStore.Models.User", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("OnlineStore.Models.OrderItem", b =>
                {
                    b.HasOne("OnlineStore.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineStore.Models.OrderTracking", b =>
                {
                    b.HasOne("OnlineStore.Models.Order", "Order")
                        .WithOne("OrderTracking")
                        .HasForeignKey("OnlineStore.Models.OrderTracking", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineStore.Models.Payment", b =>
                {
                    b.HasOne("OnlineStore.Models.Order", "Order")
                        .WithOne("Payment")
                        .HasForeignKey("OnlineStore.Models.Payment", "OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineStore.Models.PaymentTranslation", b =>
                {
                    b.HasOne("OnlineStore.Models.Payment", "Payment")
                        .WithMany("Translations")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("OnlineStore.Models.ProductAttributeTranslation", b =>
                {
                    b.HasOne("OnlineStore.Models.ProductAttribute", "Attribute")
                        .WithMany("Translations")
                        .HasForeignKey("ProductAttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");
                });

            modelBuilder.Entity("OnlineStore.Models.ProductTranslation", b =>
                {
                    b.HasOne("OnlineStore.Models.Product", "Product")
                        .WithMany("Translations")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineStore.Models.ProductVariant", b =>
                {
                    b.HasOne("OnlineStore.Models.Product", "Product")
                        .WithMany("ProductVariants")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineStore.Models.RefreshToken", b =>
                {
                    b.HasOne("OnlineStore.Models.User", "User")
                        .WithOne("RefreshToken")
                        .HasForeignKey("OnlineStore.Models.RefreshToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Models.Return", b =>
                {
                    b.HasOne("OnlineStore.Models.Order", "Order")
                        .WithMany("Returns")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Models.User", null)
                        .WithMany("Returns")
                        .HasForeignKey("UserId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineStore.Models.ReturnAttachment", b =>
                {
                    b.HasOne("OnlineStore.Models.ReturnItem", "ReturnItem")
                        .WithMany("Attachments")
                        .HasForeignKey("ReturnItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReturnItem");
                });

            modelBuilder.Entity("OnlineStore.Models.ReturnItem", b =>
                {
                    b.HasOne("OnlineStore.Models.OrderItem", "OrderItem")
                        .WithOne("ReturnItem")
                        .HasForeignKey("OnlineStore.Models.ReturnItem", "OrderItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Models.Return", "Return")
                        .WithMany("ReturnItems")
                        .HasForeignKey("ReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("Return");
                });

            modelBuilder.Entity("OnlineStore.Models.ReturnTracking", b =>
                {
                    b.HasOne("OnlineStore.Models.Return", "Return")
                        .WithOne("ReturnTracking")
                        .HasForeignKey("OnlineStore.Models.ReturnTracking", "ReturnId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Return");
                });

            modelBuilder.Entity("OnlineStore.Models.Review", b =>
                {
                    b.HasOne("OnlineStore.Models.Order", "Order")
                        .WithMany("Reviews")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("OnlineStore.Models.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Models.ReviewAttachment", b =>
                {
                    b.HasOne("OnlineStore.Models.Review", "Review")
                        .WithMany("Attachments")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Review");
                });

            modelBuilder.Entity("OnlineStore.Models.ShippingMethodTranslation", b =>
                {
                    b.HasOne("OnlineStore.Models.ShippingMethod", "ShippingMethod")
                        .WithMany("Translations")
                        .HasForeignKey("ShippingMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ShippingMethod");
                });

            modelBuilder.Entity("OnlineStore.Models.State", b =>
                {
                    b.HasOne("OnlineStore.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("OnlineStore.Models.StateTranslation", b =>
                {
                    b.HasOne("OnlineStore.Models.State", "State")
                        .WithMany("Translations")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("OnlineStore.Models.Stock", b =>
                {
                    b.HasOne("OnlineStore.Models.ProductVariant", "ProductVariant")
                        .WithOne("Stock")
                        .HasForeignKey("OnlineStore.Models.Stock", "ProductVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Models.Warehouse", "Warehouse")
                        .WithMany("Stocks")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductVariant");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("OnlineStore.Models.StockMovement", b =>
                {
                    b.HasOne("OnlineStore.Models.Stock", "Stock")
                        .WithMany("StockMovements")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("OnlineStore.Models.SupportTicket", b =>
                {
                    b.HasOne("OnlineStore.Models.Order", null)
                        .WithMany("SupportTickets")
                        .HasForeignKey("OrderId");

                    b.HasOne("OnlineStore.Models.User", "User")
                        .WithMany("SupportTickets")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Models.TagTranslation", b =>
                {
                    b.HasOne("OnlineStore.Models.Tag", "Tag")
                        .WithMany("Translations")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("OnlineStore.Models.TicketMessage", b =>
                {
                    b.HasOne("OnlineStore.Models.SupportTicket", "Ticket")
                        .WithMany("Messages")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Models.User", "User")
                        .WithMany("TicketMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Models.User", b =>
                {
                    b.HasOne("OnlineStore.Models.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Models.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Models.State", "State")
                        .WithMany("Users")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("State");
                });

            modelBuilder.Entity("OnlineStore.Models.UserPoint", b =>
                {
                    b.HasOne("OnlineStore.Models.User", "User")
                        .WithMany("Points")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Models.VariantAttributeValue", b =>
                {
                    b.HasOne("OnlineStore.Models.ProductAttribute", "Attribute")
                        .WithMany("VariantAttributeValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Models.AttributeValue", "AttributeValue")
                        .WithMany("VariantAttributeValues")
                        .HasForeignKey("AttributeValueId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("OnlineStore.Models.ProductVariant", "ProductVariant")
                        .WithMany("VariantAttributeValues")
                        .HasForeignKey("ProductVariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("AttributeValue");

                    b.Navigation("ProductVariant");
                });

            modelBuilder.Entity("OnlineStore.Models.Wallet", b =>
                {
                    b.HasOne("OnlineStore.Models.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("OnlineStore.Models.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineStore.Models.WalletTransaction", b =>
                {
                    b.HasOne("OnlineStore.Models.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("OnlineStore.Models.Wishlist", b =>
                {
                    b.HasOne("OnlineStore.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("OnlineStore.Models.User", "User")
                        .WithMany("Wishlists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PermissionRole", b =>
                {
                    b.HasOne("Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PermissionTranslation", b =>
                {
                    b.HasOne("Permission", "Permission")
                        .WithMany("Translations")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("ProductTag", b =>
                {
                    b.HasOne("OnlineStore.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Models.Tag", null)
                        .WithMany()
                        .HasForeignKey("TagsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RoleTranslation", b =>
                {
                    b.HasOne("Role", "Role")
                        .WithMany("Translations")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineStore.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineStore.Models.AppSetting", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("OnlineStore.Models.AttributeValue", b =>
                {
                    b.Navigation("Translations");

                    b.Navigation("VariantAttributeValues");
                });

            modelBuilder.Entity("OnlineStore.Models.Cart", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineStore.Models.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("OnlineStore.Models.City", b =>
                {
                    b.Navigation("Translations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OnlineStore.Models.Country", b =>
                {
                    b.Navigation("States");

                    b.Navigation("Translations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OnlineStore.Models.Coupon", b =>
                {
                    b.Navigation("CouponUsers");

                    b.Navigation("Orders");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("OnlineStore.Models.Log", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("OnlineStore.Models.Notification", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("OnlineStore.Models.Order", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("OrderTracking")
                        .IsRequired();

                    b.Navigation("Payment")
                        .IsRequired();

                    b.Navigation("Returns");

                    b.Navigation("Reviews");

                    b.Navigation("SupportTickets");
                });

            modelBuilder.Entity("OnlineStore.Models.OrderItem", b =>
                {
                    b.Navigation("ReturnItem");
                });

            modelBuilder.Entity("OnlineStore.Models.Payment", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("OnlineStore.Models.Product", b =>
                {
                    b.Navigation("ProductVariants");

                    b.Navigation("Reviews");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("OnlineStore.Models.ProductAttribute", b =>
                {
                    b.Navigation("Translations");

                    b.Navigation("Values");

                    b.Navigation("VariantAttributeValues");
                });

            modelBuilder.Entity("OnlineStore.Models.ProductVariant", b =>
                {
                    b.Navigation("Stock")
                        .IsRequired();

                    b.Navigation("VariantAttributeValues");
                });

            modelBuilder.Entity("OnlineStore.Models.Return", b =>
                {
                    b.Navigation("ReturnItems");

                    b.Navigation("ReturnTracking")
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineStore.Models.ReturnItem", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("OnlineStore.Models.Review", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("OnlineStore.Models.ShippingMethod", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("Translations");
                });

            modelBuilder.Entity("OnlineStore.Models.State", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Translations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("OnlineStore.Models.Stock", b =>
                {
                    b.Navigation("StockMovements");
                });

            modelBuilder.Entity("OnlineStore.Models.SupportTicket", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("OnlineStore.Models.Tag", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("OnlineStore.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Cart");

                    b.Navigation("CouponUsers");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Points");

                    b.Navigation("RefreshToken")
                        .IsRequired();

                    b.Navigation("Returns");

                    b.Navigation("Reviews");

                    b.Navigation("SupportTickets");

                    b.Navigation("TicketMessages");

                    b.Navigation("Wallet")
                        .IsRequired();

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("OnlineStore.Models.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("OnlineStore.Models.Warehouse", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("Permission", b =>
                {
                    b.Navigation("Translations");
                });

            modelBuilder.Entity("Role", b =>
                {
                    b.Navigation("Translations");
                });
#pragma warning restore 612, 618
        }
    }
}
